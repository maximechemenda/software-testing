{"version":3,"names":["mongoose","require","UserSchema","Schema","name","type","String","required","email","unique","lowercase","trim","validate","validator","v","test","message","password","address","role","enum","default","User","model","module","exports"],"sources":["user.js"],"sourcesContent":["// @/user.js\nconst mongoose = require(\"mongoose\");\n\nconst UserSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: true,\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: [true, \"email already exists in database!\"],\n    lowercase: true,\n    trim: true,\n    required: [true, \"email not provided\"],\n    validate: {\n      validator: function (v) {\n        return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(v);\n      },\n      message: '{VALUE} is not a valid email!'\n    }\n  },\n  password: {\n    type: String,\n    required: true,\n  },\n  address: {\n    type: String,\n    required: true,\n  },\n  role: {\n    type: String,\n    enum : ['User','Admin'],\n    default: 'User',\n    required: true,\n  },\n});\n\nconst User = mongoose.model(\"User\", UserSchema);\n\nmodule.exports = { User };"],"mappings":"AAAA;AACA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAU,CAAC;AAEpC,MAAMC,UAAU,GAAG,IAAIF,QAAQ,CAACG,MAAM,CAAC;EACrCC,IAAI,EAAE;IACJC,IAAI,EAAEC,MAAM;IACZC,QAAQ,EAAE;EACZ,CAAC;EACDC,KAAK,EAAE;IACLH,IAAI,EAAEC,MAAM;IACZC,QAAQ,EAAE,IAAI;IACdE,MAAM,EAAE,CAAC,IAAI,EAAE,mCAAmC,CAAC;IACnDC,SAAS,EAAE,IAAI;IACfC,IAAI,EAAE,IAAI;IACVJ,QAAQ,EAAE,CAAC,IAAI,EAAE,oBAAoB,CAAC;IACtCK,QAAQ,EAAE;MACRC,SAAS,EAAE,UAAUC,CAAC,EAAE;QACtB,OAAO,4BAA4B,CAACC,IAAI,CAACD,CAAC,CAAC;MAC7C,CAAC;MACDE,OAAO,EAAE;IACX;EACF,CAAC;EACDC,QAAQ,EAAE;IACRZ,IAAI,EAAEC,MAAM;IACZC,QAAQ,EAAE;EACZ,CAAC;EACDW,OAAO,EAAE;IACPb,IAAI,EAAEC,MAAM;IACZC,QAAQ,EAAE;EACZ,CAAC;EACDY,IAAI,EAAE;IACJd,IAAI,EAAEC,MAAM;IACZc,IAAI,EAAG,CAAC,MAAM,EAAC,OAAO,CAAC;IACvBC,OAAO,EAAE,MAAM;IACfd,QAAQ,EAAE;EACZ;AACF,CAAC,CAAC;AAEF,MAAMe,IAAI,GAAGtB,QAAQ,CAACuB,KAAK,CAAC,MAAM,EAAErB,UAAU,CAAC;AAE/CsB,MAAM,CAACC,OAAO,GAAG;EAAEH;AAAK,CAAC"}