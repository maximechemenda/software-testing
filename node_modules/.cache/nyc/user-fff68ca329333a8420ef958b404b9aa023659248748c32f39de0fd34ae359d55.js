function cov_8or71cosf(){var path="/Users/maximechemenda/Desktop/st-coursework/models/user.js";var hash="82955cbb7c43d4cb35cf5ca93d642d2ae457b2ca";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/maximechemenda/Desktop/st-coursework/models/user.js",statementMap:{"0":{start:{line:2,column:17},end:{line:2,column:36}},"1":{start:{line:3,column:19},end:{line:36,column:2}},"2":{start:{line:17,column:8},end:{line:17,column:52}},"3":{start:{line:37,column:13},end:{line:37,column:47}},"4":{start:{line:38,column:0},end:{line:40,column:2}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:16,column:17},end:{line:16,column:18}},loc:{start:{line:16,column:30},end:{line:18,column:7}},line:16}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0},f:{"0":0},b:{},inputSourceMap:{version:3,names:["mongoose","require","UserSchema","Schema","name","type","String","required","email","unique","lowercase","trim","validate","validator","v","test","message","password","address","role","enum","default","User","model","module","exports"],sources:["user.js"],sourcesContent:["// @/user.js\nconst mongoose = require(\"mongoose\");\n\nconst UserSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: true,\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: [true, \"email already exists in database!\"],\n    lowercase: true,\n    trim: true,\n    required: [true, \"email not provided\"],\n    validate: {\n      validator: function (v) {\n        return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(v);\n      },\n      message: '{VALUE} is not a valid email!'\n    }\n  },\n  password: {\n    type: String,\n    required: true,\n  },\n  address: {\n    type: String,\n    required: true,\n  },\n  role: {\n    type: String,\n    enum : ['User','Admin'],\n    default: 'User',\n    required: true,\n  },\n});\n\nconst User = mongoose.model(\"User\", UserSchema);\n\nmodule.exports = { User };"],mappings:"AAAA;AACA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAU,CAAC;AAEpC,MAAMC,UAAU,GAAG,IAAIF,QAAQ,CAACG,MAAM,CAAC;EACrCC,IAAI,EAAE;IACJC,IAAI,EAAEC,MAAM;IACZC,QAAQ,EAAE;EACZ,CAAC;EACDC,KAAK,EAAE;IACLH,IAAI,EAAEC,MAAM;IACZC,QAAQ,EAAE,IAAI;IACdE,MAAM,EAAE,CAAC,IAAI,EAAE,mCAAmC,CAAC;IACnDC,SAAS,EAAE,IAAI;IACfC,IAAI,EAAE,IAAI;IACVJ,QAAQ,EAAE,CAAC,IAAI,EAAE,oBAAoB,CAAC;IACtCK,QAAQ,EAAE;MACRC,SAAS,EAAE,UAAUC,CAAC,EAAE;QACtB,OAAO,4BAA4B,CAACC,IAAI,CAACD,CAAC,CAAC;MAC7C,CAAC;MACDE,OAAO,EAAE;IACX;EACF,CAAC;EACDC,QAAQ,EAAE;IACRZ,IAAI,EAAEC,MAAM;IACZC,QAAQ,EAAE;EACZ,CAAC;EACDW,OAAO,EAAE;IACPb,IAAI,EAAEC,MAAM;IACZC,QAAQ,EAAE;EACZ,CAAC;EACDY,IAAI,EAAE;IACJd,IAAI,EAAEC,MAAM;IACZc,IAAI,EAAG,CAAC,MAAM,EAAC,OAAO,CAAC;IACvBC,OAAO,EAAE,MAAM;IACfd,QAAQ,EAAE;EACZ;AACF,CAAC,CAAC;AAEF,MAAMe,IAAI,GAAGtB,QAAQ,CAACuB,KAAK,CAAC,MAAM,EAAErB,UAAU,CAAC;AAE/CsB,MAAM,CAACC,OAAO,GAAG;EAAEH;AAAK,CAAC"},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"82955cbb7c43d4cb35cf5ca93d642d2ae457b2ca"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_8or71cosf=function(){return actualCoverage;};}return actualCoverage;}cov_8or71cosf();// @/user.js
const mongoose=(cov_8or71cosf().s[0]++,require("mongoose"));const UserSchema=(cov_8or71cosf().s[1]++,new mongoose.Schema({name:{type:String,required:true},email:{type:String,required:true,unique:[true,"email already exists in database!"],lowercase:true,trim:true,required:[true,"email not provided"],validate:{validator:function(v){cov_8or71cosf().f[0]++;cov_8or71cosf().s[2]++;return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(v);},message:'{VALUE} is not a valid email!'}},password:{type:String,required:true},address:{type:String,required:true},role:{type:String,enum:['User','Admin'],default:'User',required:true}}));const User=(cov_8or71cosf().s[3]++,mongoose.model("User",UserSchema));cov_8or71cosf().s[4]++;module.exports={User};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb25nb29zZSIsInJlcXVpcmUiLCJVc2VyU2NoZW1hIiwiU2NoZW1hIiwibmFtZSIsInR5cGUiLCJTdHJpbmciLCJyZXF1aXJlZCIsImVtYWlsIiwidW5pcXVlIiwibG93ZXJjYXNlIiwidHJpbSIsInZhbGlkYXRlIiwidmFsaWRhdG9yIiwidiIsInRlc3QiLCJtZXNzYWdlIiwicGFzc3dvcmQiLCJhZGRyZXNzIiwicm9sZSIsImVudW0iLCJkZWZhdWx0IiwiVXNlciIsIm1vZGVsIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbInVzZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQC91c2VyLmpzXG5jb25zdCBtb25nb29zZSA9IHJlcXVpcmUoXCJtb25nb29zZVwiKTtcblxuY29uc3QgVXNlclNjaGVtYSA9IG5ldyBtb25nb29zZS5TY2hlbWEoe1xuICBuYW1lOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIHJlcXVpcmVkOiB0cnVlLFxuICB9LFxuICBlbWFpbDoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICB1bmlxdWU6IFt0cnVlLCBcImVtYWlsIGFscmVhZHkgZXhpc3RzIGluIGRhdGFiYXNlIVwiXSxcbiAgICBsb3dlcmNhc2U6IHRydWUsXG4gICAgdHJpbTogdHJ1ZSxcbiAgICByZXF1aXJlZDogW3RydWUsIFwiZW1haWwgbm90IHByb3ZpZGVkXCJdLFxuICAgIHZhbGlkYXRlOiB7XG4gICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uICh2KSB7XG4gICAgICAgIHJldHVybiAvXlteXFxzQF0rQFteXFxzQF0rXFwuW15cXHNAXSskLy50ZXN0KHYpO1xuICAgICAgfSxcbiAgICAgIG1lc3NhZ2U6ICd7VkFMVUV9IGlzIG5vdCBhIHZhbGlkIGVtYWlsISdcbiAgICB9XG4gIH0sXG4gIHBhc3N3b3JkOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIHJlcXVpcmVkOiB0cnVlLFxuICB9LFxuICBhZGRyZXNzOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIHJlcXVpcmVkOiB0cnVlLFxuICB9LFxuICByb2xlOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGVudW0gOiBbJ1VzZXInLCdBZG1pbiddLFxuICAgIGRlZmF1bHQ6ICdVc2VyJyxcbiAgICByZXF1aXJlZDogdHJ1ZSxcbiAgfSxcbn0pO1xuXG5jb25zdCBVc2VyID0gbW9uZ29vc2UubW9kZWwoXCJVc2VyXCIsIFVzZXJTY2hlbWEpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHsgVXNlciB9OyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxNQUFNQSxRQUFRLEdBQUdDLE9BQU8sQ0FBQyxVQUFVLENBQUM7QUFFcEMsTUFBTUMsVUFBVSxHQUFHLElBQUlGLFFBQVEsQ0FBQ0csTUFBTSxDQUFDO0VBQ3JDQyxJQUFJLEVBQUU7SUFDSkMsSUFBSSxFQUFFQyxNQUFNO0lBQ1pDLFFBQVEsRUFBRTtFQUNaLENBQUM7RUFDREMsS0FBSyxFQUFFO0lBQ0xILElBQUksRUFBRUMsTUFBTTtJQUNaQyxRQUFRLEVBQUUsSUFBSTtJQUNkRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLEVBQUUsbUNBQW1DLENBQUM7SUFDbkRDLFNBQVMsRUFBRSxJQUFJO0lBQ2ZDLElBQUksRUFBRSxJQUFJO0lBQ1ZKLFFBQVEsRUFBRSxDQUFDLElBQUksRUFBRSxvQkFBb0IsQ0FBQztJQUN0Q0ssUUFBUSxFQUFFO01BQ1JDLFNBQVMsRUFBRSxVQUFVQyxDQUFDLEVBQUU7UUFDdEIsT0FBTyw0QkFBNEIsQ0FBQ0MsSUFBSSxDQUFDRCxDQUFDLENBQUM7TUFDN0MsQ0FBQztNQUNERSxPQUFPLEVBQUU7SUFDWDtFQUNGLENBQUM7RUFDREMsUUFBUSxFQUFFO0lBQ1JaLElBQUksRUFBRUMsTUFBTTtJQUNaQyxRQUFRLEVBQUU7RUFDWixDQUFDO0VBQ0RXLE9BQU8sRUFBRTtJQUNQYixJQUFJLEVBQUVDLE1BQU07SUFDWkMsUUFBUSxFQUFFO0VBQ1osQ0FBQztFQUNEWSxJQUFJLEVBQUU7SUFDSmQsSUFBSSxFQUFFQyxNQUFNO0lBQ1pjLElBQUksRUFBRyxDQUFDLE1BQU0sRUFBQyxPQUFPLENBQUM7SUFDdkJDLE9BQU8sRUFBRSxNQUFNO0lBQ2ZkLFFBQVEsRUFBRTtFQUNaO0FBQ0YsQ0FBQyxDQUFDO0FBRUYsTUFBTWUsSUFBSSxHQUFHdEIsUUFBUSxDQUFDdUIsS0FBSyxDQUFDLE1BQU0sRUFBRXJCLFVBQVUsQ0FBQztBQUUvQ3NCLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHO0VBQUVIO0FBQUssQ0FBQyJ9
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6InloR0FnQk1BO0FBQUFBLHlGQWhCTjtBQUNBLEtBQU1DLFNBQVEseUJBQUdDLE9BQU8sQ0FBQyxVQUFVLENBQUMsRUFFcEMsS0FBTUMsV0FBVSx5QkFBRyxHQUFJRixTQUFRLENBQUNHLE1BQU0sQ0FBQyxDQUNyQ0MsSUFBSSxDQUFFLENBQ0pDLElBQUksQ0FBRUMsTUFBTSxDQUNaQyxRQUFRLENBQUUsSUFDWixDQUFDLENBQ0RDLEtBQUssQ0FBRSxDQUNMSCxJQUFJLENBQUVDLE1BQU0sQ0FDWkMsUUFBUSxDQUFFLElBQUksQ0FDZEUsTUFBTSxDQUFFLENBQUMsSUFBSSxDQUFFLG1DQUFtQyxDQUFDLENBQ25EQyxTQUFTLENBQUUsSUFBSSxDQUNmQyxJQUFJLENBQUUsSUFBSSxDQUNWSixRQUFRLENBQUUsQ0FBQyxJQUFJLENBQUUsb0JBQW9CLENBQUMsQ0FDdENLLFFBQVEsQ0FBRSxDQUNSYixTQUFTLENBQUUsU0FBVWMsQ0FBQyxDQUFFLCtDQUN0QixNQUFPLDZCQUE0QixDQUFDQyxJQUFJLENBQUNELENBQUMsQ0FBQyxDQUM3QyxDQUFDLENBQ0RFLE9BQU8sQ0FBRSwrQkFDWCxDQUNGLENBQUMsQ0FDREMsUUFBUSxDQUFFLENBQ1JYLElBQUksQ0FBRUMsTUFBTSxDQUNaQyxRQUFRLENBQUUsSUFDWixDQUFDLENBQ0RVLE9BQU8sQ0FBRSxDQUNQWixJQUFJLENBQUVDLE1BQU0sQ0FDWkMsUUFBUSxDQUFFLElBQ1osQ0FBQyxDQUNEVyxJQUFJLENBQUUsQ0FDSmIsSUFBSSxDQUFFQyxNQUFNLENBQ1phLElBQUksQ0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FDdkJDLE9BQU8sQ0FBRSxNQUFNLENBQ2ZiLFFBQVEsQ0FBRSxJQUNaLENBQ0YsQ0FBQyxDQUFDLEVBRUYsS0FBTWMsS0FBSSx5QkFBR3JCLFFBQVEsQ0FBQ3NCLEtBQUssQ0FBQyxNQUFNLENBQUVwQixVQUFVLENBQUMseUJBRS9DcUIsTUFBTSxDQUFDQyxPQUFPLENBQUcsQ0FBRUgsSUFBSyxDQUFDIiwibmFtZXMiOlsidmFsaWRhdG9yIiwibW9uZ29vc2UiLCJyZXF1aXJlIiwiVXNlclNjaGVtYSIsIlNjaGVtYSIsIm5hbWUiLCJ0eXBlIiwiU3RyaW5nIiwicmVxdWlyZWQiLCJlbWFpbCIsInVuaXF1ZSIsImxvd2VyY2FzZSIsInRyaW0iLCJ2YWxpZGF0ZSIsInYiLCJ0ZXN0IiwibWVzc2FnZSIsInBhc3N3b3JkIiwiYWRkcmVzcyIsInJvbGUiLCJlbnVtIiwiZGVmYXVsdCIsIlVzZXIiLCJtb2RlbCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJ1c2VyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEAvdXNlci5qc1xuY29uc3QgbW9uZ29vc2UgPSByZXF1aXJlKFwibW9uZ29vc2VcIik7XG5cbmNvbnN0IFVzZXJTY2hlbWEgPSBuZXcgbW9uZ29vc2UuU2NoZW1hKHtcbiAgbmFtZToge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICByZXF1aXJlZDogdHJ1ZSxcbiAgfSxcbiAgZW1haWw6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgdW5pcXVlOiBbdHJ1ZSwgXCJlbWFpbCBhbHJlYWR5IGV4aXN0cyBpbiBkYXRhYmFzZSFcIl0sXG4gICAgbG93ZXJjYXNlOiB0cnVlLFxuICAgIHRyaW06IHRydWUsXG4gICAgcmVxdWlyZWQ6IFt0cnVlLCBcImVtYWlsIG5vdCBwcm92aWRlZFwiXSxcbiAgICB2YWxpZGF0ZToge1xuICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbiAodikge1xuICAgICAgICByZXR1cm4gL15bXlxcc0BdK0BbXlxcc0BdK1xcLlteXFxzQF0rJC8udGVzdCh2KTtcbiAgICAgIH0sXG4gICAgICBtZXNzYWdlOiAne1ZBTFVFfSBpcyBub3QgYSB2YWxpZCBlbWFpbCEnXG4gICAgfVxuICB9LFxuICBwYXNzd29yZDoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICByZXF1aXJlZDogdHJ1ZSxcbiAgfSxcbiAgYWRkcmVzczoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICByZXF1aXJlZDogdHJ1ZSxcbiAgfSxcbiAgcm9sZToge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBlbnVtIDogWydVc2VyJywnQWRtaW4nXSxcbiAgICBkZWZhdWx0OiAnVXNlcicsXG4gICAgcmVxdWlyZWQ6IHRydWUsXG4gIH0sXG59KTtcblxuY29uc3QgVXNlciA9IG1vbmdvb3NlLm1vZGVsKFwiVXNlclwiLCBVc2VyU2NoZW1hKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7IFVzZXIgfTsiXX0=